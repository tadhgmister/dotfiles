diff --git a/config.def.h b/config.def.h
index f191af8..b2d5060 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,12 +1,12 @@
 /* See LICENSE file for copyright and license details. */
-
+#include <X11/XF86keysym.h>
 /* appearance */
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
+static const int showbar            = 2;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const char *fonts[]          = { "monospace:size=16" };
+static const char dmenufont[]       = "monospace:size=16";
 static const char col_gray1[]       = "#222222";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
@@ -35,7 +35,7 @@ static const Rule rules[] = {
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
 static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
-static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
+static const int lockfullscreen = 0; /* 1 will force focus on the fullscreen window */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
@@ -45,41 +45,53 @@ static const Layout layouts[] = {
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
 	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
-#define HOLDKEY 0xffe9 // 0 - disable; 0xffe9 - Mod1Mask; 0xffeb - Mod4Mask
+#define HOLDKEY 0xffeb // 0 - disable; 0xffe9 - Mod1Mask; 0xffeb - Mod4Mask
 
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
-static const char *dmenucmd[] = { "dmenu_run", "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
-
+static const char *dmenucmd[] = { "dmenuwithbangs", "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static const char *termcmd[]  = { "alacritty", NULL };
+static const char *brctlcmd[] = { "brctl", "10000", NULL };
 static const Key keys[] = {
 	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-	{ MODKEY,                       XK_b,      togglebar,      {0} },
-	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
-	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
+	{ MODKEY,                       XK_space,             spawn, {.v = dmenucmd } },
+	{ MODKEY|ShiftMask,             XK_space,             spawn, {.v = termcmd } },
+	{ 0,                      XF86XK_AudioPlay,           spawn, SHCMD("xclip -o | festival --tts") },
+	
+	{ 0,                      XF86XK_MonBrightnessUp,     spawn, SHCMD("brctl 5000") },
+	{ MODKEY,                 XF86XK_MonBrightnessUp,     spawn, SHCMD("brctl 10000") },
+	{ 0,                      XF86XK_MonBrightnessDown,   spawn, SHCMD("brctl 1") },
+	{ MODKEY,                 XF86XK_MonBrightnessDown,   spawn, SHCMD("brctl 0") },
+	{ 0,                      XF86XK_AudioMute,           spawn, SHCMD("amixer set Master mute") },
+	{ MODKEY,                 XF86XK_AudioMute,           spawn, SHCMD("amixer set Master unmute") },
+	{ 0,                      XF86XK_AudioLowerVolume,    spawn, SHCMD("amixer set Master 5%-") },
+	{ 0,                      XF86XK_AudioRaiseVolume,    spawn, SHCMD("amixer set Master 5%+") },
+	
+	/*{ MODKEY,                       XK_b,      togglebar,      {0} },*/
+	{ MODKEY,                       XK_Tab,      focusstack,     {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_Tab,      focusstack,     {.i = -1 } },
+	/*{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },*/
+	/*{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },*/
 	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
 	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY,                       XK_Tab,    view,           {0} },
-	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                       XK_space,  setlayout,      {0} },
-	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY|ShiftMask,             XK_f,      togglefullscr,  {0} },
+        /* { MODKEY,                       XK_Tab,    view,           {0} },*/
+	{ MODKEY,                       XK_BackSpace,      killclient,     {0} },
+	{ MODKEY|ShiftMask|ControlMask, XK_BackSpace,      quit,           {0} },
+	/*{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },*/
+	/*{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },*/
+	/*{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },*/
+	/*{ MODKEY,                       XK_space,  setlayout,      {0} },*/
+	/*{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },*/
+	{ MODKEY,                       XK_f,      togglefullscr,  {0} },
 	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
 	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
 	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
@@ -95,24 +107,25 @@ static const Key keys[] = {
 	TAGKEYS(                        XK_7,                      6)
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
-	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+	/*{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },*/
 	{ 0,                            HOLDKEY,   holdbar,        {0} },
 };
 
 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
+/* note all are set to use MODKEY because the bar will only show up when the mod key is held */
 static const Button buttons[] = {
 	/* click                event mask      button          function        argument */
-	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
-	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
-	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
-	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
-	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
-	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
-	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
-	{ ClkTagBar,            0,              Button1,        view,           {0} },
-	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
-	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
-	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+	{ ClkLtSymbol,          MODKEY,              Button1,        setlayout,      {0} },
+	{ ClkLtSymbol,          MODKEY,              Button3,        setlayout,      {.v = &layouts[2]} },
+	{ ClkWinTitle,          MODKEY,              Button2,        zoom,           {0} },
+	{ ClkStatusText,        MODKEY,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkClientWin,         MODKEY|ShiftMask,         Button1,        movemouse,      {0} },
+	{ ClkClientWin,         MODKEY|ShiftMask,         Button2,        togglefloating, {0} },
+	{ ClkClientWin,         MODKEY|ShiftMask,         Button3,        resizemouse,    {0} },
+	{ ClkTagBar,            MODKEY,              Button1,        view,           {0} },
+	{ ClkTagBar,            MODKEY,              Button3,        toggleview,     {0} },
+	{ ClkTagBar,            MODKEY|ShiftMask,         Button1,        tag,            {0} },
+	{ ClkTagBar,            MODKEY|ShiftMask,         Button3,        toggletag,      {0} },
 };
 
diff --git a/dwm.c b/dwm.c
index 33b3431..da725c7 100644
--- a/dwm.c
+++ b/dwm.c
@@ -1080,11 +1080,23 @@ keypress(XEvent *e)
 			keys[i].func(&(keys[i].arg));
 }
 
+int are_any_clients_running(){
+  for(Monitor* m = mons; m; m = m->next){
+    if(m->clients){
+      return 1;
+    }
+  }
+  return 0;
+}
 void
 killclient(const Arg *arg)
 {
-	if (!selmon->sel)
-		return;
+  if (!selmon->sel){
+    if(!are_any_clients_running()){
+      quit(arg);
+    }
+    return;
+  }
 	if (!sendevent(selmon->sel, wmatom[WMDelete])) {
 		XGrabServer(dpy);
 		XSetErrorHandler(xerrordummy);
@@ -1680,6 +1692,10 @@ seturgent(Client *c, int urg)
 	XWMHints *wmh;
 
 	c->isurgent = urg;
+	if (urg){
+	  Arg a = {0}; //dummy so we have an argument
+	  holdbar(&a);
+	}
 	if (!(wmh = XGetWMHints(dpy, c->win)))
 		return;
 	wmh->flags = urg ? (wmh->flags | XUrgencyHint) : (wmh->flags & ~XUrgencyHint);
@@ -2122,19 +2138,25 @@ void
 updatewmhints(Client *c)
 {
 	XWMHints *wmh;
-
+	int has_urgent = 0;
 	if ((wmh = XGetWMHints(dpy, c->win))) {
 		if (c == selmon->sel && wmh->flags & XUrgencyHint) {
 			wmh->flags &= ~XUrgencyHint;
 			XSetWMHints(dpy, c->win, wmh);
-		} else
+		} else {
 			c->isurgent = (wmh->flags & XUrgencyHint) ? 1 : 0;
+			has_urgent = has_urgent | c->isurgent;
+		}
 		if (wmh->flags & InputHint)
 			c->neverfocus = !wmh->input;
 		else
 			c->neverfocus = 0;
 		XFree(wmh);
 	}
+	if(has_urgent){
+	  Arg a = {0};
+	  holdbar(&a);
+	}
 }
 
 void
